import java.util.ArrayList;import java.util.List;import lombok.Getter;@Getterpublic abstract class Conta implements IConta {    private static final int AGENCIA_PADRAO = 1;    private static int SEQUENCIAL = 1;    protected int agencia;    protected int numero;    protected double saldo;    protected Cliente cliente;    protected List<Transacao> transacoes;    public Conta(Cliente cliente) {        this.agencia = AGENCIA_PADRAO;        this.numero = SEQUENCIAL++;        this.cliente = cliente;        this.transacoes = new ArrayList<>();    }    @Override    public void sacar(double valor) {        saldo -= valor;        transacoes.add(new Transacao("Saque", -valor));    }    @Override    public void depositar(double valor) {        saldo += valor;        transacoes.add(new Transacao("Depósito", valor));    }    @Override    public void transferir(double valor, IConta contaDestino) {        this.sacar(valor);        contaDestino.depositar(valor);        transacoes.add(new Transacao("Transferência para conta " + ((Conta) contaDestino).getNumero(), -valor));    }    public void imprimirTransacoes() {        System.out.println("=== Transações da Conta ===");        for (Transacao t : transacoes) {            System.out.println(String.format("Data: %s - Descrição: %s - Valor: %.2f", t.getDataHora(), t.getDescricao(), t.getValor()));        }    }    protected void imprimirInfosComuns() {        System.out.println(String.format("Titular: %s", this.cliente.getNome()));        System.out.println(String.format("Agência: %d", this.agencia));        System.out.println(String.format("Número: %d", this.numero));        System.out.println(String.format("Saldo: %.2f", this.saldo));    }}